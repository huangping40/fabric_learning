package counterfeiterexamplefakes_test

import (
	"errors"

	ce "github.com/huangping40/fabric_learning/counterfeiter-example/counterfeiter-examplefakes"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe("CounterfeiterExamplefakes", func() {
	var fake *ce.FakeMySpecialInterface

	BeforeEach(func() {
		fake = new(ce.FakeMySpecialInterface)
	})

	Describe("Fakes generated by counterfeiter", func() {
		Context("normal", func() {
			It("normal", func() {

				fake.DoThings("stuff", 5)
				fake.DoThings("ping", 8888)

				Expect(fake.DoThingsCallCount()).To(Equal(2))

				str, num := fake.DoThingsArgsForCall(0)
				Expect(str).To(Equal("stuff"))
				Expect(num).To(Equal(uint64(5)))

				str, num = fake.DoThingsArgsForCall(1)
				Expect(str).To(Equal("ping"))
				Expect(num).To(Equal(uint64(8888)))

			})

			It("can have its return values configured", func() {

				// new tester
				fake.DoThingsReturns(3111, errors.New("the-error"))

				num, err := fake.DoThings("stuff", 5)
				Expect(num).To(Equal(3111))
				Expect(err).To(Equal(errors.New("the-error")))
			})
		})

	})
})
