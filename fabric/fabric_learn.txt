gerrit usage:

Note for fabric project reverify is not used anymore... you can do "Run XXXXXX" where XXXXXX is the name of the job.  "Run VerifyBuild" will trigger all jobs.

------------------------------------------------------
https://docs.google.com/document/d/157AvKxVRqgeaCTSpN86ICa5x-XihZ67bOrNMc5xLvEU/edit#
gossip design doc:
1.5      Authentication and membership management
Each peer in the gossip network has its own certificate(identity) given by a Membership Service Provider (MSP) from the ones recognized within the blockchain network). It represents itself to other peers by an identifier that is deterministically derived from its certificate (identity). That identifier is called a peer’s PKI-ID. 
Each message that is gossiped (sent from a peer to a group of peers non-necessarily in a point-to-point manner, meaning- it can be relayed between peers) and asserts something about the peer:
Must contain the peer’s  PKI-ID
Must be signed by the peer
Can be verified given the peer’s certificate.
Messages that are sent point-to-point between peers and are not gossiped, are not signed because of the assumption that in a production environment, the peer’s TLS layer is activated and takes care of security considerations (prevention of traffic hijacking, replay attacks, etc.)  --> 这句话 没有看懂? 好像懂了

The only message that isn’t signed by a peer and also doesn’t travel point-to-point is a message that contains a ledger block, which is signed by the ordering service.

------------------------------------------------------
 #format: '%{color}%{time:2006-01-02 15:04:05.000 MST} [%{module}] %{shortfunc} -> %{level:.4s} %{id:03x}%{color:reset} %{message}'
    forma1t: '%{color}%{time:2006-01-02 15:04:05.000 MST} [%{module}] %{longfunc} [%{shortfile}] [%{pid}] [%{callpath:3}] -> %{level:.4s} %{id:03x}%{color:reset} %{message}'

------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------


gossip/api/        done
Total lines:  247

gossip/comm/      done 20180819
Total lines:  3027

gossip/common/  done
Total lines:  100

gossip/discovery/    done 20180822
Total lines:  2611

gossip/election/   done 20180820
Total lines:  1395

gossip/filter/
Total lines:  194

--
gossip/gossip/
Total lines:  10345

gossip/gossip/msgstore 571  done 20180820
gossip/gossip/algo 928  done 20180823
gossip/gossip/channel 2935  done 20180901
gossip/gossip/pull 812   done 20180824
-----

gossip/identity/     20180818
Total lines:  625

gossip/integration/
Total lines:  196

gossip/mocks/
Total lines:  26

gossip/privdata/
Total line:  5804

gossip/service/
Total lines:  1898

gossip/state/
Total lines:  2918

gossip/util/   done
Total lines:  894
------------------------------------------------------
// InsecureSkipVerify controls whether a client verifies the
	// server's certificate chain and host name.
	// If InsecureSkipVerify is true, TLS accepts any certificate
	// presented by the server and any host name in that certificate.
	// In this mode, TLS is susceptible to man-in-the-middle attacks.
	// This should be used only for testing.
	InsecureSkipVerify bool
	是否验证服务端的证书
------------------------------------------------------
gossip 收到包，通过isAck来 第一次分发 	
func interceptAcks(nextHandler handler, remotePeerID common.PKIidType, pubSub *util.PubSub) func(*proto.SignedGossipMessage) {
	return func(m *proto.SignedGossipMessage) {
		if m.IsAck() {
			topic := topicForAck(m.Nonce, remotePeerID)
			pubSub.Publish(topic, m.GetAck())
			return
		}
		nextHandler(m)
	}
}

------------------------------------------------------
func (c *commImpl) authenticateRemotePeer(stream stream, initiator bool) (*proto.ConnectionInfo, error) {
client,server都会触发这个方法， 都会发送 proto.ConnEstablish{}
差异是 initiator true/false。
这个proto.ConnEstablish{}消息的处理 也在方法authenticateRemotePeer里面。
------------------------------------------------------
   # Alive check interval(unit: second)
        aliveTimeInterval: 5s
# Alive expiration timeout(unit: second)
        aliveExpirationTimeout: 25s        
每隔5秒，发送一次 aliMessage
每隔2.5= aliveExpirationTimeout /10 秒，检查 alive


------------------------------------------------------
discovery  处理三类消息
	if m.GetAliveMsg() == nil && m.GetMemRes() == nil && m.GetMemReq() == nil {
		d.logger.Warning("Got message with wrong type (expected Alive or MembershipResponse or MembershipRequest message):", m.GossipMessage)
		return
	}


------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
TestDigestsFilters 可以修改？
------------------------------------------------------
感觉有问题：
		if _, isKnownAsDead := d.deadLastTS[string(am.Membership.PkiId)]; isKnownAsDead {
			d.logger.Warning(am.Membership, "has already expired")
			continue
		}
------------------------------------------------------
modify:

func TestInitPeersStartAtIntervals(t *testing.T) {
	t.Parallel()
	// Scenario: Peers are spawned one by one in a slow rate
	// expected outcome: the first peer is the leader although its ID is lowest  --> highest
	peers := createPeers(getStartupGracePeriod()+getLeadershipDeclarationInterval(), 3, 2, 1, 0)
	waitForLeaderElection(t, peers)
	assert.True(t, peers[0].IsLeader())
}
------------------------------------------------------
if memReq := m.GetMemReq(); memReq != nil { 这个消息没有验证的？
------------------------------------------------------
gossip： 协议

  根据原论文，两个节点（A、B）之间存在三种通信方式:

    push: A节点将数据(key,value,version)及对应的版本号推送给B节点，B节点更新A中比自己新的数据
    pull：A仅将数据key,version推送给B，B将本地比A新的数据（Key,value,version）推送给A，A更新本地
    push/pull：与pull类似，只是多了一步，A再将本地比B新的数据推送给B，B更新本地

https://wenku.baidu.com/view/60d851eee009581b6bd9eba1.html

------------------------------------------------------
对于 gossip/gossip/algo 外层需要实现 下面5个方法
type PullAdapter interface {
	SelectPeers() []string
	Hello(dest string, nonce uint64)
	SendDigest(digest []string, nonce uint64, context interface{})
	SendReq(dest string, items []string, nonce uint64)
	SendRes(items []string, context interface{}, nonce uint64)
}
而 gossip/gossip/pull/恰好实现了上个几个方法。
gossip/gossip/algo 仅仅保证内容 gossip到各个节点。对于具体内容（context inferface{})不关注。

pull/mediator流程：
流程：
第一：a 机器 触发 Hello 方法，  发送内容是 GossipMessage（定义触发下面的第四步）
第二：b 机器 触发 HandleMessage， onHello，SendDigest
第三：a 机器 触发 HandleMessage(触发PullAdapter.IngressDigFilter，过滤掉一些不要的信息)， OnDigest

第四：a 机器 定时触发 SendReq
第五：b 机器 触发 HandleMessage， OnReq， SendRes
第六：a 机器 触发 HandleMessage，触发业务消费方法MsgCons，OnRes


------------------------------------------------------
gossip/gossip/channel

        # Determines frequency of pulling state info messages from peers(unit: second)
        requestStateInfoInterval: 4s
        # Determines frequency of pushing state info messages to peers(unit: second)
        publishStateInfoInterval: 4s
        # Maximum count of blocks stored in memory
        maxBlockCountToStore: 100

本层定义了 Tag:proto.GossipMessage_CHAN_AND_ORG,
以dataMsg.Payload.SeqNum作为ID, 也就是 algo层的state(集合)
adapter.IngressDigFilter 中把过时的消息废弃掉。依据是ledgerHeight,意思是下一个要接受到的block


这个方法是： pullengine和mes store的 粘合剂, 也决定着 pullengin 里面放置多少数据的问题。
	gc.blockMsgStore = msgstore.NewMessageStoreExpirable(comparator, func(m interface{}) {
		gc.blocksPuller.Remove(seqNumFromMsg(m))
	}, gc.GetConf().BlockExpirationInterval, nil, nil, func(m interface{}) {
		gc.blocksPuller.Remove(seqNumFromMsg(m))
	})

----
GossipChannel管理的对象：

// Stop stop the channel operations
func (gc *gossipChannel) Stop() {
	gc.stopChan <- struct{}{}
	gc.blocksPuller.Stop()
	gc.stateInfoPublishScheduler.Stop()
	gc.stateInfoRequestScheduler.Stop()
	gc.leaderMsgStore.Stop()
	gc.stateInfoMsgStore.Stop()
	gc.blockMsgStore.Stop() --> ttl设置为 invalid， 2*ttl 清空
}
blockMsgStore 放置 : ,内存容量100个。
- type DataMessage struct
- type IsDataUpdate struct

stateInfoMsgStore 是定时	清空的，依据是 Lookup(PKIID common.PKIidType) *discovery.NetworkMember 是否为空

--

   // Periodically publish state info --> 如果 len(gc.GetMembership()) > 0,就表明自己的状态以及在
	go gc.periodicalInvocation(gc.publishStateInfo, gc.stateInfoPublishScheduler.C)
	// Periodically request state info
	go gc.periodicalInvocation(gc.requestStateInfo, gc.stateInfoRequestScheduler.C)
	
--
以下5个消息 触发业务段方法DeMultiplex。

if m.IsDataMsg() || m.IsStateInfoMsg() {
if m.IsLeadershipMsg() {
if res := msg.GetDataUpdate(); res != nil {	
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------

python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/bccsp
python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/cmd
python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/common
python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/core
python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/devenv
python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/discovery
python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/docs
python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/examples
python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/gossip
python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/idemix
python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/images
python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/integration
python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/msp
python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/orderer
python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/peer
python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/protos
python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/sampleconfig
python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/scripts
python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/token
python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/unit-test


 python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/bccsp
Total lines:  13698
 python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/cmd
Total lines:  898
 python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/common
Total lines:  37541
 python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/core
Total lines:  109169
 python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/devenv
Total lines:  0
 python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/discovery
Total lines:  11850
 python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/docs
Total lines:  0
 python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/examples
Total lines:  3640
 python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/gossip
Total lines:  30331
 python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/idemix
Total lines:  2227
 python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/images
Total lines:  0
 python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/integration
Total lines:  9465
 python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/msp
Total lines:  7668
 python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/orderer
Total lines:  15591
 python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/peer
Total lines:  12993
 python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/protos
Total lines:  26690
 python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/sampleconfig
Total lines:  0
 python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/scripts
Total lines:  0
 python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/token
Total lines:  201
 python count_lines.py --showdetail false --endswith go --path ../../hyperledger/fabric/unit-test
Total lines:  0
 

